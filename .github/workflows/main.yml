name: CI

on:
  push:
  schedule:
    - cron: '0 10 * * *'  # Once per day at 10am UTC
  workflow_dispatch:      # Manual trigger

env:
  RUN_JOBS: ${{ github.repository == 'sjohnr/release-test' }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

jobs:
  prerequisites:
    name: Pre-requisites for building
    runs-on: ubuntu-latest
    outputs:
      runjobs: ${{ steps.continue.outputs.runjobs }}
      project_version: ${{ steps.continue.outputs.project_version }}
      perform_release: ${{ steps.continue.outputs.perform_release }}
    steps:
      - uses: actions/checkout@v2
      - id: continue
        name: Determine if should continue
        if: ${{ env.RUN_JOBS }}
        run: |
          # Run jobs if in upstream repository
          echo "Setting runjobs=true"
          echo "::set-output name=runjobs::true"
          # Extract version from gradle.properties
          version=$(cat gradle.properties | grep "version=" | awk -F'=' '{print $2}')
          echo "Setting project_version=$version"
          echo "::set-output name=project_version::$version"
  build:
    name: Build JDK 17
    needs: [prerequisites]
#    strategy:
#      matrix:
#        os: [ubuntu-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    if: ${{ needs.prerequisites.outputs.runjobs }}
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup gradle user name
        run: |
          mkdir -p ~/.gradle
          echo 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - name: Build project
        run: |
          echo "Building project..."
          ./gradlew clean build --continue
  test:
    name: Test against snapshots
    needs: [prerequisites]
    runs-on: ubuntu-latest
    if: ${{ needs.prerequisites.outputs.runjobs }}
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup gradle user name
        run: |
          mkdir -p ~/.gradle
          echo 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties
      - name: Run tests
        run: |
          echo "Running tests..."
          ./gradlew test --refresh-dependencies
  deploy_artifacts:
    name: Deploy artifacts
    needs: [prerequisites, build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup gradle user name
        run: |
          mkdir -p ~/.gradle
          echo 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties
      - name: Deploy artifacts
        run: |
          echo "Deploying artifacts..."
          echo "./gradlew publishArtifacts"
  deploy_docs:
    name: Deploy docs
    needs: [prerequisites, build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup gradle user name
        run: |
          mkdir -p ~/.gradle
          echo 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties
      - name: Deploy docs
        run: |
          echo "Deploying docs..."
          echo "./gradlew deployDocs"
  release:
    name: Perform release
    needs: [prerequisites, deploy_artifacts, deploy_docs]
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ !endsWith(needs.prerequisites.outputs.project_version, '-SNAPSHOT') }}
    env:
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      TOKEN: ${{ github.token }}
      VERSION: ${{ needs.prerequisites.outputs.project_version }}
    steps:
      - name: Wait for Artifactory Artifacts
        if: ${{ contains(needs.prerequisites.outputs.project_version, '-RC') || contains(needs.prerequisites.outputs.project_version, '-M') }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on Artifactory."
          until curl -f -s https://repo.spring.io/artifactory/milestone/org/springframework/security/spring-security-core/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to Artifactory."
      - name: Wait for Maven Central Artifacts
        if: ${{ !contains(needs.prerequisites.outputs.project_version, '-RC') && !contains(needs.prerequisites.outputs.project_version, '-M') }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on Maven Central."
          until curl -f -s https://repo1.maven.org/maven2/org/springframework/security/spring-security-core/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to Maven Central."
      - name: Create GitHub Release
        run: |
          echo "Tagging and publishing $REPO@$VERSION release to GitHub."
          echo "./gradlew createGitHubRelease -PnextVersion=$VERSION -Pbranch=$BRANCH -PcreateRelease=true -PgitHubAccessToken=$TOKEN"
